{"name":"File-as-heap","tagline":"File backed Heap object store, primarily targetted for Caching applications. ","body":"File-as-heap\r\n============\r\n\r\nFile backed Heap object store, primarily targetted for Caching applications. \r\n\r\nIssues in traditional memory approaches\r\n----------------------------------------\r\n* Fragmentation occurs due to un-even memory requirements.\r\n* Caches are always symmetric in nature and every cache object are of same shape and size. Hence memory fragmentation can be minimized in this.\r\n* Famous memory allocators like libumem, hoard etc do not provide, file backing.\r\n* Caches are meant to restore the state, hence maintaining off-line history is an important requirement.\r\n* Even in case of file backing, deleted / timed-out sessions are not really deleted from the file.\r\n* Hence over the perid of time, file size grow to enormous extent and we are forced to go for new file.\r\n\r\nFeatures of File-as-heap\r\n------------------------\r\n* File backed heap. Restoration from the heap binary file is possible during init stage.\r\n* Every object will be of same size. The total size of the file will be automatically word aligned.\r\n* MMAP policy is used. Hence the File I/O bottleneck does not happen. This improves performance.\r\n* The custom heap is aligned in buckets. Hence every bucket can be re-used, re-cycled. The file size of the heap file never increases. Still the recycle is achieved.\r\n* Easy integration possible. The allocate / deallocate / walkHeap provides shares only the pointers. Hence the meta-data involving in this product is merely pointers. nothing else.\r\n\r\n\r\nFeatures planned for future versions\r\n------------------------------------\r\n* HTTP based statistics reporting.\r\n* Shared library based packaging.\r\n* COM object. Reusable.\r\n\r\n'''\r\nkspviswa [www.kspviswa.wordpress.com]\r\n======================================\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}